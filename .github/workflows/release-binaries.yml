name: release-binaries
on:
  workflow_run:
    workflows:
      - test-and-docs
      - release-please
    types:
      - complete
  push:
    tags:
      - 'v*'
    # branches:
    #   - main
    paths-ignore: ['media/**', 'docs/**', '**/*.md']
    workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build-musl:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: linux
            triple: x86_64-linux-musl
            name: linux_x64
          - os: linux
            triple: i686-linux-musl
            name: linux_x32
          - os: linux
            triple: aarch64-linux-musl
            name: linux_aarch64
          - os: linux
            triple: armv7l-linux-musleabihf
            name: linux_armv7l
        include:
          - target:
              os: linux
            builder: ubuntu-20.04
    defaults:
      run:
        shell: bash
    name: '${{ matrix.target.triple }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: jiro4989/setup-nim-action@v1.4.3
        with:
          nim-version: stable
          yes: true
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: musl-tools
          version: 1.0
      - name: setup and build
        run: |
          nimble --verbose -y setup
          nim musl -d:pcre -f:on nim_norg.nim
      - name: Compress Generated binaries
        run: |
          tar -c -z -v -f ./nim_norg-${{ matrix.target.name }}.tar.gz `ls nim_norg{,.exe} 2>/dev/null || true`
      - name: Upload Generated Binaries
        uses: actions/upload-artifact@v3
        with:
          name: nim_norg-${{ matrix.target.name }}.tar.gz
          path: nim_norg-${{ matrix.target.name }}.tar.gz
  build-mac:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: macosx
            triple: x86_64-apple-darwin14
            name: apple_x64
        include:
          - target:
              os: macosx
            builder: macos-11
    defaults:
      run:
        shell: bash
    name: '${{ matrix.target.triple }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: jiro4989/setup-nim-action@v1.4.3
        with:
          nim-version: stable
          yes: true
      - name: setup and build
        run: |
          nimble --verbose -y setup
          nimble --verbose -y build -f:on -d:release
      - name: Compress Generated binaries
        run: |
          tar -c -z -v -f ./nim_norg-${{ matrix.target.name }}.tar.gz `ls nim_norg{,.exe} 2>/dev/null || true`
      - name: Upload Generated Binaries
        uses: actions/upload-artifact@v2
        with:
          name: nim_norg-${{ matrix.target.name }}.tar.gz
          path: nim_norg-${{ matrix.target.name }}.tar.gz
  build-win:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: windows
            triple: x86_64-w64-mingw32
            name: windows_x64
          - os: windows
            triple: i686-w64-mingw32
            name: windows_x32
        include:
          - target:
              os: windows
            builder: windows-2019
    defaults:
      run:
        shell: bash
    name: '${{ matrix.target.triple }}'
    runs-on: ${{ matrix.builder }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: jiro4989/setup-nim-action@v1.4.3
        with:
          nim-version: stable
          yes: true
      - name: setup and build
        run: |
          rm nimble.lock
          nimble --verbose --noLockfile -y install https://github.com/pysan3/nim_pandoc
          nimble --verbose --noLockfile -y install cligen
          nimble --verbose -y build -f:on -d:release
      - name: Compress Generated binaries
        run: |
          tar -c -z -v -f ./nim_norg-${{ matrix.target.name }}.tar.gz `ls nim_norg{,.exe} 2>/dev/null || true`
      - name: Upload Generated Binaries
        uses: actions/upload-artifact@v2
        with:
          name: nim_norg-${{ matrix.target.name }}.tar.gz
          path: nim_norg-${{ matrix.target.name }}.tar.gz
  create-github-release:
    name: Create Github Release
    needs:
      - build-musl
      - build-mac
      - build-win
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "*/*"
          allowUpdates: true
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          failOnError: false
          name: "nim_norg-*"
